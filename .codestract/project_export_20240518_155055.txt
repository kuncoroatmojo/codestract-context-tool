# File: ./csgui.py

import os
import tkinter as tk
from tkinter import messagebox, ttk

def display_summary(summary: str, skipped_files: list):
    root = tk.Tk()
    root.withdraw()  # Hide the root window

    # Create the summary message
    message = summary + "\n\nSkipped files:\n" + "\n".join(skipped_files)
    
    # Show the summary in a popup window
    messagebox.showinfo("Export Summary", message)
    root.destroy()

def get_file_types(directory: str = '.'):
    file_types = set()
    for root, _, files in os.walk(directory):
        for file in files:
            _, ext = os.path.splitext(file)
            if ext:
                file_types.add(ext.lower())
    return sorted(file_types)

def show_file_selection_gui(start_export_callback):
    root = tk.Tk()
    root.title("Select File Types to Export")

    file_types = get_file_types()
    selected_file_types = {ext: tk.BooleanVar(value=True) for ext in file_types}

    frame = ttk.Frame(root, padding="10")
    frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

    ttk.Label(frame, text="Select file types to export:").grid(row=0, column=0, columnspan=2)

    for i, (ext, var) in enumerate(selected_file_types.items(), start=1):
        ttk.Checkbutton(frame, text=ext, variable=var).grid(row=i, column=0, sticky=tk.W)

    def on_export():
        selected = [ext for ext, var in selected_file_types.items() if var.get()]
        root.destroy()
        start_export_callback(selected)

    ttk.Button(frame, text="Export", command=on_export).grid(row=i + 1, column=0, columnspan=2)

    root.mainloop()


# File: ./README.md

# **Codestract** â€” Codebase Context Extraction for LLMs

<br>

<div align="center">
  <img src="readme-image.gif" alt="codestract-main" width="1280"/>
</div>
<br>

Codestract is a powerful command-line tool designed to extract and consolidate text-based files from your codebase into a single context file. This tool is particularly useful for developers working with Large Language Models (LLMs), as it allows them to efficiently prepare their codebase for analysis or fine-tuning by the LLM.

## Features

- **Recursive Directory Traversal**: Codestract can traverse through all subdirectories within a specified directory, ensuring that no file is left behind.
- **File Exclusion**: Automatically excludes certain files like `main.py` and output files from processing, allowing you to customize the exclusion list.
- **Image File Filtering**: Filters out files with image extensions such as `.jpg`, `.png`, etc., to focus solely on text-based files.
- **Timestamp-based Output Files**: Each time the script is run, a new output file with a timestamp is generated and saved in the `context-out` folder, ensuring that your context files are organized and easy to reference.
- **Project Structure Summary**: Codestract generates a summary of the project structure, including directories and files, and inserts it at the top of each exported context file.
- **Encoding Support**: The script supports different file encodings, ensuring compatibility with a wide range of files.
- **Command-line Arguments and Configuration**: Codestract can be customized through command-line arguments and configuration files, allowing you to specify various options such as the directory, output directory, excluded files, file encoding, and logging settings.
- **Logging**: The script provides detailed logging to both the console and a log file, making it easier to monitor and debug the execution process.

## Requirements

- **Python**: Python 3.8+ is required to run the script.

## Getting Started

### Prerequisites

Ensure that Python 3.8 or higher is installed on your system:

```bash
sudo apt-get install python3
```

### Installation

Clone the repository and navigate into the project directory:

```bash
git clone https://github.com/yourusername/codestract.git
cd codestract
```

### Usage

To use the script, run the following command in your terminal. It will start the process of scanning for files and appending their contents to the specified output file.

```bash
python3 main.py
```

You can also pass various command-line arguments to customize the behavior of the script:

```
usage: main.py [-h] [-d DIRECTORY] [-o OUTPUT_DIR] [-c CONFIG] [-e ENCODING] [--log-file LOG_FILE] [--log-level LOG_LEVEL]

Code context exporting script.

optional arguments:
  -h, --help            show this help message and exit
  -d DIRECTORY, --directory DIRECTORY
                        The directory to search for files.
  -o OUTPUT_DIR, --output-dir OUTPUT_DIR
                        The path of the output directory.
  -c CONFIG, --config CONFIG
                        The path of the configuration file.
  -e ENCODING, --encoding ENCODING
                        The encoding to use for reading and writing files.
  --log-file LOG_FILE   The path of the log file.
  --log-level LOG_LEVEL
                        The log level (e.g., DEBUG, INFO, WARNING, ERROR).
```

Alternatively, you can create a configuration file and specify its path using the `-c` or `--config` argument.

## Roadmap

Future improvements include:

- **GUI Implementation**: To enhance user interaction and provide a more user-friendly experience.
- **Support for Additional File Types**: Expand the types of files that can be processed, allowing for a more comprehensive codebase context extraction.

## Contributing

Contributions are welcome! If you have any ideas, suggestions, or bug reports, please open an issue or submit a pull request.

## License

This project is licensed under the [MIT License](LICENSE).


# File: ./app.py

import os
import logging
from datetime import datetime
from csgui import display_summary, show_file_selection_gui

def is_selected_file(file_name: str, selected_types: list) -> bool:
    """Checks if a file should be included based on its extension and user selection."""
    _, extension = os.path.splitext(file_name)
    return extension.lower() in selected_types

def append_files_to_project(directory: str = '.', selected_types: list = None, excluded_files: set = None):
    """Appends selected text-based files from the project to a single output file."""
    output_dir = '.codestract'
    os.makedirs(output_dir, exist_ok=True)

    if excluded_files is None:
        excluded_files = {'main.py'}
    else:
        excluded_files.update({'main.py'})

    total_chars = 0
    file_count = 0
    total_file_size = 0
    skipped_dirs = []
    skipped_files = []

    start_time = datetime.now()
    timestamp = start_time.strftime("%Y%m%d_%H%M%S")
    output_file_name = f"project_export_{timestamp}.txt"
    output_file_path = os.path.join(output_dir, output_file_name)

    try:
        with open(output_file_path, 'w', encoding='utf-8') as outfile:
            for root, dirs, files in os.walk(directory):
                # Skip directories named '.env' or '.venv'
                dirs[:] = [d for d in dirs if d not in {'.env', '.venv'}]

                # Capture skipped directories
                skipped_dirs.extend([os.path.join(root, d) for d in set(dirs) - set(os.listdir(root))])

                for file in files:
                    file_path = os.path.join(root, file)
                    if file not in excluded_files and is_selected_file(file, selected_types):
                        try:
                            with open(file_path, 'r', encoding='utf-8') as infile:
                                contents = infile.read()
                                outfile.write(f'# File: {file_path}\n\n')
                                outfile.write(contents)
                                outfile.write("\n\n")
                                total_chars += len(contents)
                                file_count += 1
                                total_file_size += os.path.getsize(file_path)
                        except Exception as e:
                            logging.error(f"Error reading file {file_path}: {e}")
                            skipped_files.append(file_path)
                    else:
                        skipped_files.append(file_path)

            end_time = datetime.now()
            execution_time = end_time - start_time

            summary = (f'Summary:\n'
                       f'- Total characters: {total_chars}\n'
                       f'- Total files processed: {file_count}\n'
                       f'- Total file size: {total_file_size} bytes\n'
                       f'- Skipped directories: {len(skipped_dirs)}\n'
                       f'- Skipped files: {len(skipped_files)}\n'
                       f'- Execution time: {execution_time}\n')

            outfile.write('-' * 40 + '\n')
            outfile.write(summary)
            outfile.write('-' * 40 + '\n')

            logging.info(summary)

            if skipped_dirs:
                logging.info("Skipped directories:")
                for directory in skipped_dirs:
                    logging.info(directory)
            if skipped_files:
                logging.info("Skipped files:")
                for file in skipped_files:
                    logging.info(file)

            # Display the summary in a GUI popup
            display_summary(summary, skipped_files)

        return True
    except Exception as e:
        logging.error(f"Failed to write to {output_file_path}: {e}")
        return False

def setup_logging(log_file_name='logfile.log'):
    """Sets up logging configuration."""
    output_dir = '.codestract'
    os.makedirs(output_dir, exist_ok=True)
    log_file_path = os.path.join(output_dir, log_file_name)

    # Setup logging to file and console
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    # Create handlers
    stream_handler = logging.StreamHandler()
    file_handler = logging.FileHandler(log_file_path)
    # Create formatter and add it to handlers
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    stream_handler.setFormatter(formatter)
    file_handler.setFormatter(formatter)
    # Add handlers to the logger
    logger.addHandler(stream_handler)
    logger.addHandler(file_handler)

def main():
    setup_logging()
    
    def start_export(selected_types):
        if append_files_to_project(selected_types=selected_types):
            logging.info("Code base exported successfully.")
        else:
            logging.error("Failed to export code base.")

    show_file_selection_gui(start_export)

if __name__ == "__main__":
    main()


----------------------------------------
Summary:
- Total characters: 10440
- Total files processed: 3
- Total file size: 10442 bytes
- Skipped directories: 0
- Skipped files: 35
- Execution time: 0:00:00.002452
----------------------------------------
